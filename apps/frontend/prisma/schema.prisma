generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  friendsFrom   Friendship[] @relation("friendsFrom")
  friendsTo     Friendship[] @relation("friendsTo")

  // Clan relations
  clanLeaderOf Clan?  @relation("ClanLeader")
  clans        Clan[] @relation("ClanMembers")

  // xp courses 
  xp       Int @default(0)
  eloScore Int @default(1200) // default ELO score for new players
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  provider          String
  providerAccountId String
  type              String
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum StatusEnum {
  pending
  accepted
  blocked
}

model Friendship {
  id         String     @id @default(cuid())
  fromUserId String
  toUserId   String
  status     StatusEnum
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  fromUser   User       @relation("friendsFrom", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUser     User       @relation("friendsTo", fields: [toUserId], references: [id], onDelete: Cascade)

  @@unique([fromUserId, toUserId])
}

model Clan {
  id           String @id @default(cuid())
  name         String @unique
  clanLeaderId String @unique
  clanLeader   User   @relation("ClanLeader", fields: [clanLeaderId], references: [id])
  members      User[] @relation("ClanMembers")
}

enum AiLevelEnum {
  easy
  medium
  hard
}
